#!/usr/bin/python

# pysunrise - Reads performance information from Solectria PVI inverters.
#
# Copyright (C) 2012 Philippe Gauthier <philippe.gauthier@deuxpi.ca>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from pysunrise.modbus import InverterModbusClient

class PVInverter:
    def __init__(self, client, address):
        self.client = client
        self.address = address

    def read_registers(self, starting_address, num_points):
        rr = self.client.read_holding_registers(starting_address, num_points, unit=self.address)
        if rr is not None:
            return rr.registers

class PVStack:
    def __init__(self, inverters):
        self.inverters = inverters

    def _get_sum(self, register):
        value = 0.0
        for pvi in self.inverters:
            response = pvi.read_registers(register, 1)
            if not response:
                continue
            value += response[0]
        return value

    def _get_mean(self, register):
        return self._get_sum(register) / len(self.inverters)

    def get_energy_today(self):
        try:
            return self._get_sum(0xd9) * 0.1
        except Exception, e:
            return None

    def get_hours_today(self):
        try:
            return self._get_mean(0xcc) / 2048.0
        except:
            return None

    def get_hours_total(self):
        try:
            return self._get_mean(0xd1)
        except:
            return None

    def get_total_energy(self):
        try:
            energy_hi = self._get_sum(0xc4)
            energy_low = self._get_sum(0xc5)
            return (energy_hi * 1000.0) + (energy_low * 0.1)
        except Exception, e:
            return None

    def get_pv_voltage(self):
        try:
            return self._get_mean(0xba) * 0.1
        except:
            return None

    def get_pv_power(self):
        try:
            return self._get_sum(0xbd)
        except:
            return None

    def get_ac_voltage(self):
        try:
            return self._get_mean(0xc0) * 0.1
        except:
            return None

    def get_ac_power(self):
        try:
            return self._get_sum(0xc1)
        except:
            return None

    def get_ac_current(self):
        try:
            return self._get_sum(0xc2) * 0.1
        except:
            return None

    def get_ac_frequency(self):
        try:
            return self._get_mean(0xc3) * 0.01
        except:
            return None

def display(label, value, units, precision=6):
    if value is None:
        value = "%11s" % "n/a"
    else:
        value_format = "%%11.%df" % precision
        value = value_format % value
    print "%-26s = %s %s\n" % (label, value, units)

if __name__ == '__main__':
    # We have two inverters each connected to a USB serial port.
    inverters = []
    for port, address in [("/dev/ttyUSB0", 13), ("/dev/ttyUSB1", 15)]:
        client = InverterModbusClient(port=port, baudrate=19200)
        inverter = PVInverter(client, address)
        inverters.append(inverter)
    stack = PVStack(inverters)

    print
    energy_today = stack.get_energy_today()
    display("Energy Today", energy_today, "kWh", 3)

    hours_today = stack.get_hours_today()
    display("Hours Today", hours_today, "h", 3)

    runtime = stack.get_hours_total()
    display("Running Hours", runtime, "h", 3)

    total_energy = stack.get_total_energy()
    display("Total Energy", total_energy, "kWh", 3)

    pv_power = None
    ac_power = None
    print

    pv_voltage = stack.get_pv_voltage()
    display("PV Voltage", pv_voltage, "V")

    pv_power = stack.get_pv_power()
    display("PV Power", pv_power, "W")

    print

    ac_voltage = stack.get_ac_voltage()
    display("AC Voltage", ac_voltage, "V")

    ac_current = stack.get_ac_current()
    display("AC Current", ac_current, "A")

    ac_power = stack.get_ac_power()
    display("AC Power", ac_power, "W")

    ac_frequency = stack.get_ac_frequency()
    display("AC Frequency", ac_frequency, "Hz")

    print

    if pv_power is not None and ac_power is not None and pv_power != 0.0:
        eff = (ac_power / pv_power) * 100.0
        display("DC/AC Conversion Efficiency", eff, "%", 1)

